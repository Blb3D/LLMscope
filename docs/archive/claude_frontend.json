{
  "name": "llmscope-frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "recharts": "^2.10.0",
    "lucide-react": "^0.263.1",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:8000"
}

---
// frontend/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

---
// frontend/src/App.js
import React, { useState, useEffect } from 'react';
import Dashboard from './Dashboard';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';
const API_KEY = process.env.REACT_APP_API_KEY || 'dev-key-change-in-production';

function App() {
  const [data, setData] = useState([]);
  const [stats, setStats] = useState(null);
  const [violations, setViolations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchData = async () => {
    try {
      const response = await fetch(`${API_URL}/api/data?hours=1&limit=60`, {
        headers: {
          'Authorization': `Bearer ${API_KEY}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      // Transform data for dashboard
      const transformedData = result.data.map((point, index) => ({
        time: index + 1,
        timestamp: point.timestamp,
        latency: point.latency,
        tokensIn: point.tokens_total ? Math.floor(point.tokens_total * 0.3) : 0,
        tokensOut: point.tokens_total ? Math.floor(point.tokens_total * 0.7) : 0,
        tokensTotal: point.tokens_total || 0,
        cost: point.cost || 0,
        success: point.success,
        violation: result.violations.some(v => v.index === index)
      }));

      setData(transformedData);
      setStats(result.stats);
      setViolations(result.violations);
      setLoading(false);
      setError(null);
    } catch (err) {
      console.error('Error fetching data:', err);
      setError(err.message);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
    const interval = setInterval(fetchData, 5000); // Refresh every 5 seconds
    return () => clearInterval(interval);
  }, []);

  if (loading && data.length === 0) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        background: 'linear-gradient(to bottom right, #020617, #0f172a, #020617)',
        color: 'white',
        fontFamily: 'system-ui, -apple-system, sans-serif'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{
            width: '50px',
            height: '50px',
            border: '4px solid rgba(59, 130, 246, 0.3)',
            borderTopColor: '#3b82f6',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 20px'
          }}></div>
          <div>Loading LLMscope...</div>
        </div>
        <style>{`
          @keyframes spin {
            to { transform: rotate(360deg); }
          }
        `}</style>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        background: 'linear-gradient(to bottom right, #020617, #0f172a, #020617)',
        color: 'white',
        fontFamily: 'system-ui, -apple-system, sans-serif'
      }}>
        <div style={{
          background: 'rgba(220, 38, 38, 0.1)',
          border: '1px solid rgba(220, 38, 38, 0.3)',
          borderRadius: '12px',
          padding: '30px',
          maxWidth: '500px',
          textAlign: 'center'
        }}>
          <div style={{ fontSize: '48px', marginBottom: '20px' }}>⚠️</div>
          <h2 style={{ margin: '0 0 10px 0' }}>Connection Error</h2>
          <p style={{ color: '#fca5a5', margin: '0 0 20px 0' }}>{error}</p>
          <button
            onClick={fetchData}
            style={{
              background: '#3b82f6',
              border: 'none',
              color: 'white',
              padding: '10px 20px',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '14px'
            }}
          >
            Retry Connection
          </button>
          <div style={{ marginTop: '20px', fontSize: '12px', color: '#94a3b8' }}>
            Make sure the backend is running at {API_URL}
          </div>
        </div>
      </div>
    );
  }

  return <Dashboard data={data} stats={stats} violations={violations} />;
}

export default App;

---
// frontend/src/Dashboard.jsx
// (Copy the React dashboard from the first artifact - the LLMscopeDashboard component)
// But modify it to accept props instead of generating fake data:

import React from 'react';
import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from 'recharts';
import { Activity, DollarSign, Zap, TrendingUp, AlertCircle, Clock, Database, CheckCircle, XCircle } from 'lucide-react';

const Dashboard = ({ data, stats, violations }) => {
  const formatCost = (cost) => `$${(cost || 0).toFixed(4)}`;
  const formatLatency = (lat) => `${(lat || 0).toFixed(2)}s`;

  return (
    <div className="w-full min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-white p-4">
      <div className="max-w-7xl mx-auto space-y-4">
        
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <div className="flex items-center gap-3">
              <Activity className="w-8 h-8 text-blue-400" />
              <h1 className="text-3xl font-bold">LLMscope</h1>
              <span className="text-xs text-slate-400 bg-slate-800 px-2 py-1 rounded">MVP v0.1</span>
            </div>
            <p className="text-slate-400 text-sm mt-1">Real-time AI Performance Monitoring</p>
          </div>
          
          <div className="flex items-center gap-3">
            <div className="flex items-center gap-2 bg-slate-800/50 px-3 py-2 rounded-lg border border-slate-700">
              {data.length > 0 ? (
                <>
                  <CheckCircle className="w-4 h-4 text-green-400" />
                  <span className="text-sm text-green-400">Connected</span>
                </>
              ) : (
                <>
                  <XCircle className="w-4 h-4 text-red-400" />
                  <span className="text-sm text-red-400">No Data</span>
                </>
              )}
            </div>

            <button className="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg text-sm font-medium transition">
              Upgrade to Pro
            </button>
          </div>
        </div>

        {/* Key Metrics */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-4">
            <div className="flex items-center gap-2 text-slate-400 text-sm mb-2">
              <Zap className="w-4 h-4" />
              Current Latency
            </div>
            <div className="text-3xl font-bold text-blue-400">
              {data.length > 0 ? formatLatency(data[data.length - 1].latency) : '--'}
            </div>
            <div className="text-xs text-slate-500 mt-1">Mean: {formatLatency(stats?.mean || 0)}</div>
          </div>

          <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-4">
            <div className="flex items-center gap-2 text-slate-400 text-sm mb-2">
              <TrendingUp className="w-4 h-4" />
              P95 Latency
            </div>
            <div className="text-3xl font-bold text-purple-400">{formatLatency(stats?.p95 || 0)}</div>
            <div className="text-xs text-slate-500 mt-1">σ = {(stats?.std_dev || 0).toFixed(3)}s</div>
          </div>

          <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-4">
            <div className="flex items-center gap-2 text-slate-400 text-sm mb-2">
              <DollarSign className="w-4 h-4" />
              Total Cost
            </div>
            <div className="text-3xl font-bold text-green-400">{formatCost(stats?.total_cost || 0)}</div>
            <div className="text-xs text-slate-500 mt-1">This session</div>
          </div>

          <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-4">
            <div className="flex items-center gap-2 text-slate-400 text-sm mb-2">
              <Database className="w-4 h-4" />
              Requests
            </div>
            <div className="text-3xl font-bold text-amber-400">{stats?.count || 0}</div>
            <div className="text-xs text-slate-500 mt-1">
              Errors: {(stats?.error_rate || 0).toFixed(1)}%
            </div>
          </div>
        </div>

        {/* Violations Alert */}
        {violations.length > 0 && (
          <div className="bg-red-950/30 border border-red-800/50 rounded-xl p-4">
            <div className="flex items-start gap-3">
              <AlertCircle className="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <h3 className="font-semibold text-red-300 mb-2">Performance Anomalies Detected</h3>
                <div className="space-y-1 text-sm text-red-200">
                  {violations.map((v, i) => (
                    <div key={i} className="flex items-center gap-2">
                      <span className={`w-2 h-2 rounded-full ${v.severity === 'critical' ? 'bg-red-500' : 'bg-amber-500'}`}></span>
                      {v.message}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Latency Chart with SPC */}
        <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold flex items-center gap-2">
              <Clock className="w-5 h-5 text-blue-400" />
              Response Latency (SPC Analysis)
            </h2>
            <div className="text-xs text-slate-400">
              Last {data.length} requests • Live updating
            </div>
          </div>
          
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={data}>
              <CartesianGrid strokeDasharray="3 3" stroke="#334155" />
              <XAxis 
                dataKey="time" 
                stroke="#94a3b8"
                tick={{ fontSize: 12 }}
              />
              <YAxis 
                stroke="#94a3b8"
                tick={{ fontSize: 12 }}
                label={{ value: 'Latency (seconds)', angle: -90, position: 'insideLeft', style: { fill: '#94a3b8' } }}
              />
              <Tooltip 
                contentStyle={{ 
                  backgroundColor: '#1e293b', 
                  border: '1px solid #475569',
                  borderRadius: '8px'
                }}
                labelStyle={{ color: '#e2e8f0' }}
              />
              <Line 
                type="monotone" 
                dataKey="latency" 
                stroke="#3b82f6" 
                strokeWidth={2}
                isAnimationActive={false}
                dot={(props) => {
                  const { cx, cy, payload } = props;
                  if (payload.violation) {
                    return (
                      <circle 
                        cx={cx} 
                        cy={cy} 
                        r={5} 
                        fill="#ef4444" 
                        stroke="#fca5a5" 
                        strokeWidth={2}
                      />
                    );
                  }
                  return <circle cx={cx} cy={cy} r={2} fill="#3b82f6" />;
                }}
                name="Latency"
              />
              {stats && (
                <>
                  <ReferenceLine 
                    y={stats.mean} 
                    stroke="#64748b" 
                    strokeDasharray="5 5"
                    label={{ value: `μ=${stats.mean.toFixed(2)}s`, position: 'right', fill: '#94a3b8', fontSize: 11 }}
                  />
                  <ReferenceLine 
                    y={stats.ucl} 
                    stroke="#fca5a5" 
                    strokeDasharray="3 3"
                    label={{ value: '+3σ', position: 'right', fill: '#fca5a5', fontSize: 10 }}
                  />
                  <ReferenceLine 
                    y={stats.lcl} 
                    stroke="#fca5a5" 
                    strokeDasharray="3 3"
                    label={{ value: '-3σ', position: 'right', fill: '#fca5a5', fontSize: 10 }}
                  />
                </>
              )}
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Cost & Token Usage */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-6">
            <h2 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <DollarSign className="w-5 h-5 text-green-400" />
              Cost Over Time
            </h2>
            <ResponsiveContainer width="100%" height={200}>
              <BarChart data={data.slice(-20)}>
                <CartesianGrid strokeDasharray="3 3" stroke="#334155" />
                <XAxis dataKey="time" stroke="#94a3b8" tick={{ fontSize: 10 }} />
                <YAxis stroke="#94a3b8" tick={{ fontSize: 10 }} />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px' }}
                  formatter={(value) => formatCost(value)}
                />
                <Bar dataKey="cost" fill="#10b981" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </div>

          <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-6">
            <h2 className="text-lg font-semibold mb-4">Token Usage</h2>
            <ResponsiveContainer width="100%" height={200}>
              <BarChart data={data.slice(-20)}>
                <CartesianGrid strokeDasharray="3 3" stroke="#334155" />
                <XAxis dataKey="time" stroke="#94a3b8" tick={{ fontSize: 10 }} />
                <YAxis stroke="#94a3b8" tick={{ fontSize: 10 }} />
                <Tooltip 
                  contentStyle={{ backgroundColor: '#1e293b', border: '1px solid #475569', borderRadius: '8px' }}
                />
                <Legend />
                <Bar dataKey="tokensIn" fill="#3b82f6" name="Input" stackId="a" />
                <Bar dataKey="tokensOut" fill="#8b5cf6" name="Output" stackId="a" />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Stats Summary */}
        <div className="bg-slate-800/50 backdrop-blur border border-slate-700 rounded-xl p-6">