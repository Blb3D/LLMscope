# ======================================================
#  LLMscope Frontend Dockerfile (secure + optimized)
# ======================================================

# === Build Stage ===
# Use latest Node 22 Alpine variant for smaller footprint and better CVE coverage
FROM node:22-alpine AS builder

# Security: make sure we get the latest patches in the base image
RUN apk update && apk upgrade

# Set working directory
WORKDIR /app

# Copy dependency manifests first (to leverage build cache)
COPY frontend/package*.json ./

# Install only production deps (omit audit banners)
RUN npm install --no-audit --no-fund

# Copy the entire frontend source into container
COPY frontend/ .

# Build static assets
RUN npm run build


# === Serve Stage ===
# Use pinned and patched Nginx Alpine release to suppress vulnerability scanner warnings
FROM nginx:1.27.2-alpine

# Update Alpine packages to latest security versions
RUN apk update && apk upgrade

# Set working directory to Nginx web root
WORKDIR /usr/share/nginx/html

# Copy built frontend assets from builder stage
COPY --from=builder /app/dist/ ./

# Copy in the custom Nginx configuration (proxy /api â†’ backend)
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Optional: reduce container size by clearing cache
RUN rm -rf /var/cache/apk/*

# Expose port 80 (default)
EXPOSE 80

# Default Nginx command
CMD ["nginx", "-g", "daemon off;"]
